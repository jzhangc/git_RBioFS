ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
+
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SEM) * 1.1), with(pltdfm, max(Mean + SEM) * 1.1)))
###### PCA
## the data must be in col: index + features, row: samples format
## dfmIndex - index variable
bioPCA <- function(dfm, dfmIndex, transpo = FALSE,
ARR = 0.4, exT = 1.2,
fontType = "sans",
xLabel = NULL, xTickLblSize = 10, xTickItalic = FALSE, xAngle = 0, xAlign = 0.5,
yLabel = NULL, yTickLblSize = 10, yTickItalic = FALSE,
legendTtl=FALSE, plotWidth = 170, plotHeight = 150){
PCA <- prcomp(dfm[, -c(1:2)], scale. = TRUE)
baseplot <- ggord(PCA, dfmIndex, arrow = ARR, ext = exT)
grid.newpage()
plt <- baseplot +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
plot.title = element_text(face = "bold", family = fontType),
axis.title = element_text(face = "bold", family = fontType),
legend.position = "bottom",legend.title = element_blank(),legend.key = element_blank(),
axis.text.x = element_text(size = xTickLblSize, family = fontType, angle = xAngle, hjust = xAlign),
axis.text.y = element_text(size = yTickLblSize, family = fontType, hjust = 0.5))
ggsave(filename = paste(deparse(substitute(dfm)),".plot.pdf", sep = ""), plot = plt,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(plt) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0.01, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0.02, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = "all", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = 20, plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 20, plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", plotWidth = 400, plotHeight = 200)
rm(list = ls(all = TRUE))
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
load(file = "PTSD.R")
require(limma)
require(edgeR)
require(ggplot2)
require(reshape2)
require(grid)
require(gtable)
# random forest
require(randomForest)
require(ROCR)
require(ggord)
View(rfplot)
setwd("~/OneDrive/knowledge_lib/Bioinformatics/[scripts]in_dev_codes/git_repos/git_RBioMachine")
devtools::document()
setwd("~/OneDrive/knowledge_lib/Bioinformatics/[scripts]in_dev_codes/git_repos/git_RBioMachine/RBioMachine")
devtools::document()
library(RBioMachine)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
Title = NULL, xLable = NULL,
yLable = "Mean Decrease in Accuracy",
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0.01, 0)) +
ggtitle(Title) +
xlab(xLable) + # we can hide it using NULL
ylab(yLable) +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
save(list = ls(all = TRUE), file = "PTSD.R")
setwd("~/OneDrive/knowledge_lib/Bioinformatics/[scripts]in_dev_codes/git_repos/git_RBioMachine/RBioMachine")
devtools::document()
library(RBioMachine)
devtools::document()
library(RBioMachine)
rm(list = ls(all = TRUE))
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
require(RBioMachine)
library("RBioML", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:RBioML", unload=TRUE)
remove.packages("RBioML")
detach("package:RBioMachine", unload=TRUE)
library("RBioMachine", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rbioRF_viplot(impFS_HCvTC)
load(file = "PTSD.R")
require(limma)
require(edgeR)
require(ggplot2)
require(reshape2)
require(grid)
require(gtable)
# random forest
require(randomForest)
require(ROCR)
rbioRF_viplot(impFS_HCvTC)
setwd("~/OneDrive/knowledge_lib/Bioinformatics/[scripts]in_dev_codes/git_repos/git_RBioMachine/RBioMachine")
devtools::document()
library(RBioMachine)
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
rbioRF_viplot(impFS_HCvTC, yLabel = "features")
rbioRF_viplot(impFS_HCvTC, Title = "Varaible Importance",yLabel = "features")
rbioRF_viplot(impFS_HCvTC, Title = "Varaible Importance",yLabel = "Features")
?write.csv
?deparse
?substitute
environment(fsRF)
?get
?environment
fsRF <- function(dfm,  targetVar, nTimes = 50, transpo = TRUE, nTree = 1001){
### load the dataframe/matrix
if (transpo == TRUE){
training <- t(dfm) # load the dataframe/matrix and transpose
} else {
training <- dfm
}
### pepare the target variable
tgt <- factor(as.character(targetVar), levels = unique(targetVar))
### prepare draw size. this uses down-sampling if the samples are unbalanced
nlvl <- length(levels(tgt))
size <- min(as.vector(table(tgt))) # down-sampling
drawSize <- rep(size, nlvl)
### repeating random forest - iterative approach
# pre-set an empty matrix with the number of columns same as the number of RF iterations
# note that nrow is the number of features, hence the ncol of the traning set
tmpMtx <- matrix(nrow = ncol(training), ncol = nTimes)
tmpFunc <- function(n, m, mtx, tmpTraining, tmpTgt,
tmpTree, tmpSize){
loclEnv <- environment() # save the environment local to tmpFunc
if (n == 0){
rownames(mtx) <- colnames(tmpTraining)
colnames(mtx) <- c(paste("accuracy", seq(m - 1), sep = "_"))
write.csv(mtx, file = paste(deparse(substitute(dfm, env = parent.env(loclEnv))), "_vi.csv", sep = ""))
return(mtx)
} else {
rf <- randomForest(x = tmpTraining, y = tmpTgt, ntree = tmpTree, importance = TRUE,
proximity = TRUE, drawSize = tmpSize)
impt <- importance(rf, type = 1)
mtx[, m] <- impt[, 1]
tmpFunc(n - 1, m + 1, mtx, tmpTraining, tmpTgt, tmpTree, tmpSize)
}
}
tmpFunc(n = nTimes, m = 1, mtx = tmpMtx, tmpTraining = training, tmpTgt = tgt,
tmpTree = nTree, tmpSize = drawSize)
}
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
fsRF(training_TCvPTSD, tgtVar_TCvsPTSD, transpo = FALSE)
impFS_HCvTC <- fsRF(training_HCvTC, tgtVar_HCvTC, transpo = FALSE)
impFS_HCvTC <- fsRF(training_HCvTC, tgtVar_HCvTC, transpo = FALSE)
View(training_HCvPTSD)
View(impFS_HCvPTSD)
?write.csv
seq(6)
seq(6) +
1
fsRF <- function(dfm,  targetVar, nTimes = 50, transpo = TRUE, nTree = 1001){
### load the dataframe/matrix
if (transpo == TRUE){
training <- t(dfm) # load the dataframe/matrix and transpose
} else {
training <- dfm
}
### pepare the target variable
tgt <- factor(as.character(targetVar), levels = unique(targetVar))
### prepare draw size. this uses down-sampling if the samples are unbalanced
nlvl <- length(levels(tgt))
size <- min(as.vector(table(tgt))) # down-sampling
drawSize <- rep(size, nlvl)
### repeating random forest - iterative approach
# pre-set an empty matrix with the number of columns same as the number of RF iterations
# note that nrow is the number of features, hence the ncol of the traning set
tmpMtx <- matrix(nrow = ncol(training), ncol = nTimes)
tmpFunc <- function(n, m, mtx, tmpTraining, tmpTgt,
tmpTree, tmpSize){
loclEnv <- environment() # save the environment local to tmpFunc
if (n == 0){
rownames(mtx) <- colnames(tmpTraining)
colnames(mtx) <- c(paste("accuracy", seq(m - 1), sep = "_"))
output <- data.frame(feature = rownames(mtx), mtx)
write.csv(output,
file = paste(deparse(substitute(dfm, env = parent.env(loclEnv))),
"_vi.csv", sep = ""),
row.names = FALSE) # parent.env() to access to the parent environment. but be sure to create a local environment first.
return(mtx)
} else {
rf <- randomForest(x = tmpTraining, y = tmpTgt, ntree = tmpTree, importance = TRUE,
proximity = TRUE, drawSize = tmpSize)
impt <- importance(rf, type = 1)
mtx[, m] <- impt[, 1]
tmpFunc(n - 1, m + 1, mtx, tmpTraining, tmpTgt, tmpTree, tmpSize)
}
}
tmpFunc(n = nTimes, m = 1, mtx = tmpMtx, tmpTraining = training, tmpTgt = tgt,
tmpTree = nTree, tmpSize = drawSize)
}
impFS_HCvTC <- fsRF(training_HCvTC, tgtVar_HCvTC, transpo = FALSE)
rbioRF_viplot(impFS_HCvTC, Title = "Varaible Importance", yLabel = "Features")
setwd("~/OneDrive/knowledge_lib/Bioinformatics/[scripts]in_dev_codes/git_repos/git_RBioMachine/RBioMachine")
devtools::document()
library(RBioMachine)
rbioRF_vi
require(RBioMachine) # my package
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
save(list = ls(all = TRUE), file = "PTSD.R")
rm(list = ls(all = TRUE))
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
setwd("~/OneDrive/my papers/my papers/potential_DRDC_paper_1/dataset")
setwd("~/OneDrive/my papers/my papers/potential_DRDC_paper 1/dataset")
setwd("~/OneDrive/my papers/my papers/potential_DRDC_paper 1(PSTD)/dataset")
setwd("~/OneDrive/my papers/my papers/potential_DRDC_paper 1 (PSTD)/dataset")
setwd("~/OneDrive/my papers/my papers/potential_DRDC_paper 1 (PTSD)/dataset")
load(file = "PTSD.R")
head(raw)
require(limma)
?lmFit
length(raw)
raw[2]
raw[3]
raw[3][!is.na(raw[3])]
head(rawT)
setwd("~/OneDrive/knowledge_lib/Bioinformatics/[scripts]in_dev_codes/git_repos/git_RBioMachine/RBioMachine")
devtools::document()
library(RBioMachine)
?rbioIMP
devtools::document()
library(RBioMachine)
devtools::document()
library(RBioMachine)
devtools::document()
library(RBioMachine)
?singleIMP
library(RBioMachine)
?rbioIMP
?backgroundCorrect
?nor\
?normalizeBetweenArrays
devtools::document()
library(RBioMachine)
?rbioNorm
devtools::document()
library(RBioMachine)
