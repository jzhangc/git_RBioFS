scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0, 0.01)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
+
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SEM) * 1.1), with(pltdfm, max(Mean + SEM) * 1.1)))
###### PCA
## the data must be in col: index + features, row: samples format
## dfmIndex - index variable
bioPCA <- function(dfm, dfmIndex, transpo = FALSE,
ARR = 0.4, exT = 1.2,
fontType = "sans",
xLabel = NULL, xTickLblSize = 10, xTickItalic = FALSE, xAngle = 0, xAlign = 0.5,
yLabel = NULL, yTickLblSize = 10, yTickItalic = FALSE,
legendTtl=FALSE, plotWidth = 170, plotHeight = 150){
PCA <- prcomp(dfm[, -c(1:2)], scale. = TRUE)
baseplot <- ggord(PCA, dfmIndex, arrow = ARR, ext = exT)
grid.newpage()
plt <- baseplot +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
plot.title = element_text(face = "bold", family = fontType),
axis.title = element_text(face = "bold", family = fontType),
legend.position = "bottom",legend.title = element_blank(),legend.key = element_blank(),
axis.text.x = element_text(size = xTickLblSize, family = fontType, angle = xAngle, hjust = xAlign),
axis.text.y = element_text(size = yTickLblSize, family = fontType, hjust = 0.5))
ggsave(filename = paste(deparse(substitute(dfm)),".plot.pdf", sep = ""), plot = plt,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(plt) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0.01, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 30, plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0.02, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = "all", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = 20, plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9)) +
scale_y_continuous(limits = c(with(pltdfm, min(Mean - SD) * 1.1), with(pltdfm, max(Mean + SD) * 1.1)))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = 20, plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", plotWidth = 400, plotHeight = 200)
rm(list = ls(all = TRUE))
setwd("~/OneDrive/my papers/my papers/potential_DRDC paper 1/dataset")
load(file = "PTSD.R")
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = "all", errorbar = SD, plotWidth = 400, plotHeight = 200)
require(limma)
require(edgeR)
require(ggplot2)
require(reshape2)
require(grid)
require(gtable)
# random forest
require(randomForest)
require(ROCR)
rfplot(impFS_HCvTC, n = "all", errorbar = SD, plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", errorbar = "SD", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", errorbar = "SEM", plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0, 0.01)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = "all", errorbar = "SEM", plotWidth = 400, plotHeight = 200)
rfplot <- function(fsdfm, n = "all",
errorbar = "SEM", errorbarWidth = 0.2,
xTxtSize = 10, yTxtSize =10,
plotWidth = 170, plotHeight = 150){
## prepare the dataframe
fName <- rownames(fsdfm)
fMean <- rowMeans(fsdfm)
fSD <- apply(fsdfm, 1, sd)
fSEM <- sapply(fSD, function(x)x/sqrt(ncol(fsdfm)))
pltdfm <- data.frame(Targets = fName, Mean = fMean, SD = fSD, SEM = fSEM, stringsAsFactors = FALSE)
pltdfm <- pltdfm[order(pltdfm$Mean), ]
pltdfm$Targets <- factor(pltdfm$Targets, levels = unique(pltdfm$Targets))
if (n != "all"){
pltdfm <- tail(pltdfm, n)
}
## boxplot
# prepare plotting dataframe (draft only)
loclEnv <- environment()
baseplt <- ggplot(pltdfm, aes(x = Targets, y = Mean), environment = loclEnv) +
geom_bar(position="dodge", stat="identity", color="black")+
scale_x_discrete(expand = c(0.01, 0)) +
scale_y_continuous(expand = c(0.01, 0)) +
ggtitle(NULL) +
xlab(NULL) + # we can hide it using NULL
ylab("Mean Decrease in Accuracy") +
geom_hline(yintercept = 0) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = xTxtSize, angle = 90, hjust = 1),
axis.text.y = element_text(size = yTxtSize, hjust = 0.5)) +
coord_flip()
if (errorbar == "SEM"){
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = errorbarWidth,
position = position_dodge(0.9))
} else if (errorbar == "SD") {
plt <- baseplt +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = errorbarWidth,
position = position_dodge(0.9))
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename = paste(deparse(substitute(fsdfm)),".plot.pdf", sep = ""), plot = pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi = 600) # deparse(substitute(dfm)) converts object name into a character string
grid.draw(pltgtb) # preview
}
rfplot(impFS_HCvTC, n = "all", errorbar = "SEM", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", errorbar = "SD", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", errorbar = "SEM", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = 40, errorbar = "SEM", plotWidth = 400, plotHeight = 200)
save(list = ls(all = TRUE), file = "PTSD.R")
rfplot(impFS_HCvTC, n = 10, errorbar = "SEM", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = 25, errorbar = "SEM", plotWidth = 400, plotHeight = 200)
rfplot(impFS_HCvTC, n = "all", errorbar = "SEM", plotWidth = 400, plotHeight = 200)
